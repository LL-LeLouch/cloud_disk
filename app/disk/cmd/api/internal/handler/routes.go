// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	File "cloud-disk/app/disk/cmd/api/internal/handler/File"
	Share "cloud-disk/app/disk/cmd/api/internal/handler/Share"
	Statistics "cloud-disk/app/disk/cmd/api/internal/handler/Statistics"
	"cloud-disk/app/disk/cmd/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/share/basic/create",
				Handler: Share.ShareBasicCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/share/basic/save",
				Handler: Share.ShareBasicSaveHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/file/stat",
				Handler: Statistics.StatisticsFileHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/share/statistics",
				Handler: Statistics.StatisticsShareHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/file/upload",
				Handler: File.FileUploadHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/repository/save",
				Handler: File.UserRepositorySaveHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user/file/list",
				Handler: File.UserFileListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/file/name/update",
				Handler: File.UserFileNameUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/folder/create",
				Handler: File.UserFolderCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/user/file/delete",
				Handler: File.UserFileDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/user/file/move",
				Handler: File.UserFileMoveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/file/download",
				Handler: File.FileDownloadHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/file/upload/prepare",
				Handler: File.FileUploadPrepareHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/file/upload/chunk",
				Handler: File.FileUploadChunkHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/file/upload/chunk/complete",
				Handler: File.FileUploadChunkCompleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
	)
}
