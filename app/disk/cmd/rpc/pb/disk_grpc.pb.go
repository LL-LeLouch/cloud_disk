// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: disk.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiskClient is the client API for Disk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiskClient interface {
	//store 详情
	DetailStore(ctx context.Context, in *StoreDetailReq, opts ...grpc.CallOption) (*StoreDetailResp, error)
	//修改store大小
	UpdateStore(ctx context.Context, in *UpdateStoreReq, opts ...grpc.CallOption) (*UpdateStoreResp, error)
	//获取路径下的文件和文件夹
	ListFolders(ctx context.Context, in *ListFolderReq, opts ...grpc.CallOption) (*ListFolderResp, error)
	//更新file信息
	UpdateFile(ctx context.Context, in *UpdateFileReq, opts ...grpc.CallOption) (*UpdateFileResp, error)
	//更新folder信息
	UpdateFolder(ctx context.Context, in *UpdateFolderReq, opts ...grpc.CallOption) (*UpdateFolderResp, error)
	//获取种类型的文件
	ListKind(ctx context.Context, in *ListKindReq, opts ...grpc.CallOption) (*ListKindResp, error)
}

type diskClient struct {
	cc grpc.ClientConnInterface
}

func NewDiskClient(cc grpc.ClientConnInterface) DiskClient {
	return &diskClient{cc}
}

func (c *diskClient) DetailStore(ctx context.Context, in *StoreDetailReq, opts ...grpc.CallOption) (*StoreDetailResp, error) {
	out := new(StoreDetailResp)
	err := c.cc.Invoke(ctx, "/pb.disk/DetailStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskClient) UpdateStore(ctx context.Context, in *UpdateStoreReq, opts ...grpc.CallOption) (*UpdateStoreResp, error) {
	out := new(UpdateStoreResp)
	err := c.cc.Invoke(ctx, "/pb.disk/UpdateStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskClient) ListFolders(ctx context.Context, in *ListFolderReq, opts ...grpc.CallOption) (*ListFolderResp, error) {
	out := new(ListFolderResp)
	err := c.cc.Invoke(ctx, "/pb.disk/ListFolders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskClient) UpdateFile(ctx context.Context, in *UpdateFileReq, opts ...grpc.CallOption) (*UpdateFileResp, error) {
	out := new(UpdateFileResp)
	err := c.cc.Invoke(ctx, "/pb.disk/UpdateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskClient) UpdateFolder(ctx context.Context, in *UpdateFolderReq, opts ...grpc.CallOption) (*UpdateFolderResp, error) {
	out := new(UpdateFolderResp)
	err := c.cc.Invoke(ctx, "/pb.disk/UpdateFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskClient) ListKind(ctx context.Context, in *ListKindReq, opts ...grpc.CallOption) (*ListKindResp, error) {
	out := new(ListKindResp)
	err := c.cc.Invoke(ctx, "/pb.disk/ListKind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiskServer is the server API for Disk service.
// All implementations must embed UnimplementedDiskServer
// for forward compatibility
type DiskServer interface {
	//store 详情
	DetailStore(context.Context, *StoreDetailReq) (*StoreDetailResp, error)
	//修改store大小
	UpdateStore(context.Context, *UpdateStoreReq) (*UpdateStoreResp, error)
	//获取路径下的文件和文件夹
	ListFolders(context.Context, *ListFolderReq) (*ListFolderResp, error)
	//更新file信息
	UpdateFile(context.Context, *UpdateFileReq) (*UpdateFileResp, error)
	//更新folder信息
	UpdateFolder(context.Context, *UpdateFolderReq) (*UpdateFolderResp, error)
	//获取种类型的文件
	ListKind(context.Context, *ListKindReq) (*ListKindResp, error)
	mustEmbedUnimplementedDiskServer()
}

// UnimplementedDiskServer must be embedded to have forward compatible implementations.
type UnimplementedDiskServer struct {
}

func (UnimplementedDiskServer) DetailStore(context.Context, *StoreDetailReq) (*StoreDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailStore not implemented")
}
func (UnimplementedDiskServer) UpdateStore(context.Context, *UpdateStoreReq) (*UpdateStoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStore not implemented")
}
func (UnimplementedDiskServer) ListFolders(context.Context, *ListFolderReq) (*ListFolderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFolders not implemented")
}
func (UnimplementedDiskServer) UpdateFile(context.Context, *UpdateFileReq) (*UpdateFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}
func (UnimplementedDiskServer) UpdateFolder(context.Context, *UpdateFolderReq) (*UpdateFolderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFolder not implemented")
}
func (UnimplementedDiskServer) ListKind(context.Context, *ListKindReq) (*ListKindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKind not implemented")
}
func (UnimplementedDiskServer) mustEmbedUnimplementedDiskServer() {}

// UnsafeDiskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiskServer will
// result in compilation errors.
type UnsafeDiskServer interface {
	mustEmbedUnimplementedDiskServer()
}

func RegisterDiskServer(s grpc.ServiceRegistrar, srv DiskServer) {
	s.RegisterService(&Disk_ServiceDesc, srv)
}

func _Disk_DetailStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServer).DetailStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.disk/DetailStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServer).DetailStore(ctx, req.(*StoreDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disk_UpdateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServer).UpdateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.disk/UpdateStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServer).UpdateStore(ctx, req.(*UpdateStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disk_ListFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServer).ListFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.disk/ListFolders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServer).ListFolders(ctx, req.(*ListFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disk_UpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServer).UpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.disk/UpdateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServer).UpdateFile(ctx, req.(*UpdateFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disk_UpdateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServer).UpdateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.disk/UpdateFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServer).UpdateFolder(ctx, req.(*UpdateFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disk_ListKind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServer).ListKind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.disk/ListKind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServer).ListKind(ctx, req.(*ListKindReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Disk_ServiceDesc is the grpc.ServiceDesc for Disk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Disk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.disk",
	HandlerType: (*DiskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DetailStore",
			Handler:    _Disk_DetailStore_Handler,
		},
		{
			MethodName: "UpdateStore",
			Handler:    _Disk_UpdateStore_Handler,
		},
		{
			MethodName: "ListFolders",
			Handler:    _Disk_ListFolders_Handler,
		},
		{
			MethodName: "UpdateFile",
			Handler:    _Disk_UpdateFile_Handler,
		},
		{
			MethodName: "UpdateFolder",
			Handler:    _Disk_UpdateFolder_Handler,
		},
		{
			MethodName: "ListKind",
			Handler:    _Disk_ListKind_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "disk.proto",
}
