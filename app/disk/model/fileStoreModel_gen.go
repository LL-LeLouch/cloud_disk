// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"cloud-disk/common/globalkey"
	"cloud-disk/common/xerr"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	fileStoreFieldNames          = builder.RawFieldNames(&FileStore{})
	fileStoreRows                = strings.Join(fileStoreFieldNames, ",")
	fileStoreRowsExpectAutoSet   = strings.Join(stringx.Remove(fileStoreFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	fileStoreRowsWithPlaceHolder = strings.Join(stringx.Remove(fileStoreFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheCloudDiskFileStoreIdPrefix = "cache:cloudDisk:fileStore:id:"
)

type (
	fileStoreModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *FileStore) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*FileStore, error)
		Update(ctx context.Context, session sqlx.Session, data *FileStore) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *FileStore) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultFileStoreModel struct {
		sqlc.CachedConn
		table string
	}

	FileStore struct {
		Id          int64         `db:"id"`           // 文件仓库ID
		UserId      sql.NullInt64 `db:"user_id"`      // 主人ID
		CurrentSize int64         `db:"current_size"` // 当前容量（单位KB）
		MaxSize     int64         `db:"max_size"`     // 最大容量（单位KB）
		Version     int64         `db:"version"`      // 乐观锁版本号
		DeleteTime  time.Time     `db:"delete_time"`
		DelState    int64         `db:"del_state"`
	}
)

func newFileStoreModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultFileStoreModel {
	return &defaultFileStoreModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`file_store`",
	}
}

func (m *defaultFileStoreModel) Insert(ctx context.Context, session sqlx.Session, data *FileStore) (sql.Result, error) {
	data.DeleteTime = time.Unix(0, 0)
	cloudDiskFileStoreIdKey := fmt.Sprintf("%s%v", cacheCloudDiskFileStoreIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, fileStoreRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.CurrentSize, data.MaxSize, data.Version, data.DeleteTime, data.DelState)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.CurrentSize, data.MaxSize, data.Version, data.DeleteTime, data.DelState)
	}, cloudDiskFileStoreIdKey)
}

func (m *defaultFileStoreModel) FindOne(ctx context.Context, id int64) (*FileStore, error) {
	cloudDiskFileStoreIdKey := fmt.Sprintf("%s%v", cacheCloudDiskFileStoreIdPrefix, id)
	var resp FileStore
	err := m.QueryRowCtx(ctx, &resp, cloudDiskFileStoreIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", fileStoreRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id, globalkey.DelStateNo)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFileStoreModel) Update(ctx context.Context, session sqlx.Session, data *FileStore) (sql.Result, error) {
	cloudDiskFileStoreIdKey := fmt.Sprintf("%s%v", cacheCloudDiskFileStoreIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, fileStoreRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.CurrentSize, data.MaxSize, data.Version, data.DeleteTime, data.DelState, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.CurrentSize, data.MaxSize, data.Version, data.DeleteTime, data.DelState, data.Id)
	}, cloudDiskFileStoreIdKey)
}

func (m *defaultFileStoreModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, data *FileStore) error {

	oldVersion := data.Version
	data.Version += 1

	var sqlResult sql.Result
	var err error

	cloudDiskFileStoreIdKey := fmt.Sprintf("%s%v", cacheCloudDiskFileStoreIdPrefix, data.Id)
	sqlResult, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ? and version = ? ", m.table, fileStoreRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.CurrentSize, data.MaxSize, data.Version, data.DeleteTime, data.DelState, data.Id, oldVersion)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.CurrentSize, data.MaxSize, data.Version, data.DeleteTime, data.DelState, data.Id, oldVersion)
	}, cloudDiskFileStoreIdKey)
	if err != nil {
		return err
	}
	updateCount, err := sqlResult.RowsAffected()
	if err != nil {
		return err
	}
	if updateCount == 0 {
		return xerr.NewErrCode(xerr.DB_UPDATE_AFFECTED_ZERO_ERROR)
	}

	return nil
}

func (m *defaultFileStoreModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	cloudDiskFileStoreIdKey := fmt.Sprintf("%s%v", cacheCloudDiskFileStoreIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, cloudDiskFileStoreIdKey)
	return err
}

func (m *defaultFileStoreModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCloudDiskFileStoreIdPrefix, primary)
}
func (m *defaultFileStoreModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", fileStoreRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary, globalkey.DelStateNo)
}

func (m *defaultFileStoreModel) tableName() string {
	return m.table
}
