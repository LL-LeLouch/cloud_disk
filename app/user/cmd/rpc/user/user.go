// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package user

import (
	"context"

	"cloud-disk/app/user/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GenerateTokenReq          = pb.GenerateTokenReq
	GenerateTokenResp         = pb.GenerateTokenResp
	GetUserAuthByAuthKeyReq   = pb.GetUserAuthByAuthKeyReq
	GetUserAuthByAuthKeyResp  = pb.GetUserAuthByAuthKeyResp
	GetUserAuthByIdentityReq  = pb.GetUserAuthByIdentityReq
	GetUserAuthByIdentityResp = pb.GetUserAuthByIdentityResp
	GetUserInfoReq            = pb.GetUserInfoReq
	GetUserInfoResp           = pb.GetUserInfoResp
	LoginReq                  = pb.LoginReq
	LoginResp                 = pb.LoginResp
	RegisterReq               = pb.RegisterReq
	RegisterResp              = pb.RegisterResp
	UserAuth                  = pb.UserAuth
	UserDetail                = pb.UserDetail

	User interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
		GetUserAuthByAuthKey(ctx context.Context, in *GetUserAuthByAuthKeyReq, opts ...grpc.CallOption) (*GetUserAuthByAuthKeyResp, error)
		GetUserAuthByIdentity(ctx context.Context, in *GetUserAuthByIdentityReq, opts ...grpc.CallOption) (*GetUserAuthByIdentityResp, error)
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

func (m *defaultUser) GetUserAuthByAuthKey(ctx context.Context, in *GetUserAuthByAuthKeyReq, opts ...grpc.CallOption) (*GetUserAuthByAuthKeyResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserAuthByAuthKey(ctx, in, opts...)
}

func (m *defaultUser) GetUserAuthByIdentity(ctx context.Context, in *GetUserAuthByIdentityReq, opts ...grpc.CallOption) (*GetUserAuthByIdentityResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserAuthByIdentity(ctx, in, opts...)
}

func (m *defaultUser) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}
