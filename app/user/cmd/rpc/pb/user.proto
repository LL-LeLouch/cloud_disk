syntax = "proto3";

package pb;

option go_package= "./pb";

//model
message UserDetail {
  int64 id = 1;
  string email = 2;
  string nickname =3;
  int64  sex = 4;
  string avatar = 5;
  string info = 6;
}

message UserAuth {
  int64  id = 1;
  string  identity = 2;
  string authType = 3;
  string authKey = 4;
}
//model


//req resp
message RegisterReq{
  string email =1;
  string password = 2;
  string nickname = 3;
  string authKey = 4;
  string authType = 5;
}
message RegisterResp{
  string accessToken = 1;
  int64  accessExpire = 2;
  int64  refreshAfter = 3;
}

message LoginReq {
  string  authType = 1;
  string authKey = 2;
  string  password = 3;
}
message LoginResp {
  string accessToken = 1;
  int64  accessExpire = 2;
  int64  refreshAfter = 3;
}

message GetUserInfoReq{
  string identity = 1;
}
message GetUserInfoResp{
  UserDetail user =1;
}

message GetUserAuthByAuthKeyReq {
  string  authKey = 1;
  string  authType = 2;
}
message GetUserAuthByAuthKeyResp {
  UserAuth userAuth = 1;
}

message GetUserAuthByIdentityReq {
  string  identity = 1;
  string  authType = 2;
}
message GetUserAuthByIdentityResp {
  UserAuth userAuth = 1;
}

message GenerateTokenReq {
  string identity = 1;
}
message GenerateTokenResp {
  string accessToken = 1;
  int64  accessExpire = 2;
  int64  refreshAfter = 3;
}

//service
service user {
  rpc login(LoginReq) returns(LoginResp);
  rpc register(RegisterReq) returns(RegisterResp);
  rpc getUserInfo(GetUserInfoReq) returns(GetUserInfoResp);
  rpc getUserAuthByAuthKey(GetUserAuthByAuthKeyReq) returns(GetUserAuthByAuthKeyResp);
  rpc getUserAuthByIdentity(GetUserAuthByIdentityReq) returns(GetUserAuthByIdentityResp);
  rpc generateToken(GenerateTokenReq) returns(GenerateTokenResp);
}